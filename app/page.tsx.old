'use client';
import { StrictMode, Suspense, useLayoutEffect } from 'react';
import * as THREE from 'three';
import { useRef, useEffect, useState, useMemo, use } from 'react';

import dynamic from 'next/dynamic';
const DynamicCanvas = dynamic(
  () => import('@react-three/fiber').then((mod) => mod.Canvas),
  {
    ssr: false,
  },
);

import { extend, useFrame, useLoader, useThree } from '@react-three/fiber';
import { EffectComposer, Bloom, SSAO } from '@react-three/postprocessing';
import {
  Line,
  Mask,
  OrbitControls,
  PerspectiveCamera,
  shaderMaterial,
  useMask,
} from '@react-three/drei';
import { analyzeImage, loadImage } from '@/utils/map-dots';
import Orbit2 from '@/three/Orbit';

import Overlay from '@/components/Overlay';
import Helpers from '@/components/Helpers';
import { EARTH_MEAN_RADIUS } from '@/utils/constants';

import * as satellite from 'satellite.js';
const SunCalc = require('suncalc');
var projector = require('ecef-projector');

/*  ˅˅˅  REACT REDUX  ˅˅˅  */
import { store } from '@/lib/redux/store';
import { Provider } from 'react-redux';
/*  ˄˄˄  REACT REDUX  ˄˄˄  */

import SatelliteCanvas from '@/components/SatelliteCanvas';
import Earth from '@/components/Earth';
import Timekeeper from '@/lib/Timekeeper';
import React from 'react';
import hypertimer from 'hypertimer';

export default function App() {
  const [, forceUpdate] = React.useReducer((x) => x + 1, 0);

  const timer = React.useRef(
    hypertimer({
      rate: 1,
      time: Date.now(),
      paced: true,
    }),
  );

  const [mapPixels, setMapPixels] = useState<boolean[][]>();

  useEffect(() => {
    loadImage('/bnw_map.png').then((img) => setMapPixels(analyzeImage(img)));
    THREE.Cache.enabled = true;
  }, []);

  useLayoutEffect(() => {
    THREE.Object3D.DEFAULT_UP = new THREE.Vector3(0, 0, 1);
  }, []);

  const hoverRef = useRef<THREE.Mesh>(null);

  ////////////////////////////////////////////////

  var tleLine1 =
      '1 25544U 98067A   19156.50900463  .00003075  00000-0  59442-4 0  9992',
    tleLine2 =
      '2 25544  51.6433  59.2583 0008217  16.4489 347.6017 15.51174618173442';

  var satrec = satellite.twoline2satrec(
    `1 25544U 98067A   24016.87842653  .00032364  00000-0  58271-3 0  9990`,
    `2 25544  51.6419 350.0354 0005130  98.7712 348.5344 15.49499681434931`,
  );

  // satrec = satellite.twoline2satrec(tleLine1, tleLine2);

  var positionAndVelocity = satellite.propagate(satrec, new Date());
  var gmst = satellite.gstime(new Date());
  var positionEcf = satellite.eciToEcf(positionAndVelocity.position, gmst);

  var ISS = new THREE.Vector3(
    positionEcf['x'] / 1000,
    positionEcf['y'] / 1000,
    positionEcf['z'] / 1000,
  );

  let segments = Math.round((24 * 60) / 15.51174618) * 15;
  // let ISSCurve = new Float32Array(segments * 3 * 2);
  let ISSCurve: number[] = [];

  for (let i = 0; i < segments; i++) {
    const iterDate = new Date(new Date().valueOf() + (i * 60000) / 1);
    positionAndVelocity = satellite.propagate(satrec, iterDate);

    const iterGmst = satellite.gstime(iterDate);

    ISSCurve[i * 6] =
      satellite.eciToEcf(positionAndVelocity.position, iterGmst)['x'] / 1000;
    ISSCurve[i * 6 + 1] =
      satellite.eciToEcf(positionAndVelocity.position, iterGmst)['y'] / 1000;
    ISSCurve[i * 6 + 2] =
      satellite.eciToEcf(positionAndVelocity.position, iterGmst)['z'] / 1000;
    ISSCurve[i * 6 + 3] =
      satellite.eciToEcf(positionAndVelocity.position, iterGmst)['x'] / 1000;
    ISSCurve[i * 6 + 4] =
      satellite.eciToEcf(positionAndVelocity.position, iterGmst)['y'] / 1000;
    ISSCurve[i * 6 + 5] =
      satellite.eciToEcf(positionAndVelocity.position, iterGmst)['z'] / 1000;
  }

  let ISSCurvePast: number[] = [];

  for (let i = 0; i < 50; i++) {
    positionAndVelocity = satellite.propagate(
      satrec,
      new Date(new Date().valueOf() + -i / 1),
    );

    ISSCurvePast[i * 6] =
      satellite.eciToEcf(positionAndVelocity.position, gmst)['x'] / 1000;
    ISSCurvePast[i * 6 + 1] =
      satellite.eciToEcf(positionAndVelocity.position, gmst)['y'] / 1000;
    ISSCurvePast[i * 6 + 2] =
      satellite.eciToEcf(positionAndVelocity.position, gmst)['z'] / 1000;
    ISSCurvePast[i * 6 + 3] =
      satellite.eciToEcf(positionAndVelocity.position, gmst)['x'] / 1000;
    ISSCurvePast[i * 6 + 4] =
      satellite.eciToEcf(positionAndVelocity.position, gmst)['y'] / 1000;
    ISSCurvePast[i * 6 + 5] =
      satellite.eciToEcf(positionAndVelocity.position, gmst)['z'] / 1000;
  }

  ////////////////////////////////////////////////

  const [timeDelta, setTimeDelta] = useState(0);
  const [sunCartesian, setSunCartesian] = useState([0, 0, 0]);

  const litHalf = useMask(1, false);
  const darkHalf = useMask(1, true);

  useEffect(() => {
    let date = new Date(new Date().valueOf() + timeDelta * 1000);

    console.log(date);
    const sun_geodetic = SunCalc.getPosition(date, 89.8, 0);
    // const sun_cartesian = projector.project(
    //   (sun_geodetic.altitude * 180) / Math.PI,
    //   (sun_geodetic.azimuth * 180) / Math.PI,
    //   0,
    // );
    const sun_cartesian = satellite.geodeticToEcf({
      longitude: -sun_geodetic.azimuth,
      latitude: sun_geodetic.altitude,
      height: 0,
    });
    setSunCartesian([sun_cartesian.x, sun_cartesian.y, sun_cartesian.z]);
  }, [timeDelta]);

  /*  ˅˅˅  EARTH SHADER STUFF  ˅˅˅  */

  const textureLoader = new THREE.TextureLoader();

  const earthUniforms = {
    sunDirection: new THREE.Vector3(...sunCartesian).normalize(),
    dayTexture: textureLoader.load('blue_marble.jpg'),
    nightTexture: textureLoader.load('black_marble.jpg'),
  };

  const vs = `
  varying vec2 vUv;
  varying vec3 vNormal;
  
  void main() {
    vUv = uv;
    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
    vNormal = normalMatrix * normal;
    gl_Position = projectionMatrix * mvPosition;
  }
  `;

  const fs = `
  uniform sampler2D dayTexture;
  uniform sampler2D nightTexture;
  
  uniform vec3 sunDirection;
  
  varying vec2 vUv;
  varying vec3 vNormal;
  
  void main( void ) {
    vec3 dayColor = texture2D( dayTexture, vUv ).rgb;
    vec3 nightColor = texture2D( nightTexture, vUv ).rgb;
  
    // compute cosine sun to normal so -1 is away from sun and +1 is toward sun.
    float cosineAngleSunToNormal = dot(normalize(vNormal), sunDirection);
  
    // sharpen the edge beween the transition
    cosineAngleSunToNormal = clamp( cosineAngleSunToNormal * 10.0, -1.0, 1.0);
  
    // convert to 0 to 1 for mixing
    float mixAmount = cosineAngleSunToNormal * 0.5 + 0.5;
  
    // Select day or night texture based on mix.
    vec3 color = mix( nightColor, dayColor, mixAmount );
  
    gl_DiffuseColor = vec4( color, 1.0 );
  }
  `;

  // const EarthMaterial = shaderMaterial(earthUniforms, vs, fs);
  // extend({ EarthMaterial });

  var earthShader = THREE.ShaderLib.physical;
  var earthUniforms2 = THREE.UniformsUtils.clone(earthShader.uniforms);
  var newEarthUniforms2 = {};
  // for each of earthUniforms2
  for (const [key, value] of Object.entries(earthUniforms2)) {
    // console.log(`${key}: ${value}`);
    newEarthUniforms2[key] = value;
  }

  var EarthMaterial = shaderMaterial(
    newEarthUniforms2,
    earthShader.vertexShader,
    earthShader.fragmentShader,
  );
  extend({ EarthMaterial });

  /*  ˄˄˄  EARTH SHADER STUFF  ˄˄˄  */

  return (
    <div id='canvas-container' className='overflow-hidden'>
      <StrictMode>
        <Provider store={store}>
          <SatelliteCanvas />
          {false && (
            <DynamicCanvas>
              <PerspectiveCamera
                makeDefault
                position={[40, 40, 40]}
                fov={30}
                aspect={window.innerWidth / window.innerHeight}
                near={0.1}
                far={500}
              />
              <ambientLight intensity={0.7} />
              <directionalLight
                color='white'
                position={sunCartesian}
                intensity={5}
              />
              <OrbitControls enablePan={false} />
              <Mask
                id={1}
                quaternion={new THREE.Quaternion().setFromUnitVectors(
                  new THREE.Vector3(0, 0, 1),
                  new THREE.Vector3(
                    sunCartesian[0],
                    sunCartesian[1],
                    sunCartesian[2],
                  ).normalize(),
                )}
                // colorWrite
                // depthWrite
                // renderOrder={-10}
              >
                <sphereGeometry
                  args={[EARTH_MEAN_RADIUS, 100, 100, 0, Math.PI]}
                />
                <meshBasicMaterial
                  // alphaMap={useLoader(THREE.TextureLoader, 'ramp.png')}
                  color={0xffffff66}
                />
              </Mask>

              <group rotation={[Math.PI / 2, 0, 0]}>
                <Earth sunPosition={new THREE.Vector3(...sunCartesian)} />
                {/* <mesh visible={true}>
                <sphereGeometry args={[EARTH_MEAN_RADIUS, 100, 100]} />
                <meshStandardMaterial
                  // {...darkHalf}
                  map={useLoader(THREE.TextureLoader, 'black_marble.jpg')}
                  // emissiveMap={useLoader(
                  //   THREE.TextureLoader,
                  //   'black_marble.jpg',
                  // )}
                  // emissiveIntensity={10}
                  // color={0xff6600}
                  roughness={0.7}
                  metalness={0.1}
                />
              </mesh> */}

                {/* <mesh>
                <sphereGeometry args={[EARTH_MEAN_RADIUS + 0.1, 100, 100]} />
                <shaderMaterial
                  vertexShader={`varying vec3 vNormal;
                    void main() {
                      vNormal = normalize( normalMatrix * normal );
                      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
                    }`}
                  fragmentShader={` varying vec3 vNormal;
                    void main() {
                      float intensity = pow( 0.8 - dot( vNormal, vec3( 0, 0, 2.0 ) ), 12.0 );
                      gl_FragColor = vec4( 0.3, 0.3, 1.0, 1.0 ) * intensity;
                    }`}
                  side={1}
                />
              </mesh> */}
                {typeof mapPixels !== 'undefined' && true && (
                  <Dots rows={120} dotDensity={4.5} map={mapPixels!} />
                )}
              </group>
              <Orbit2
                visible={false}
                linewidth={0.06}
                curve={ISSCurve}
                onPointerMove={(e) => {
                  e.stopPropagation();
                  if (!hoverRef.current) return;
                  hoverRef.current.visible = true;
                  hoverRef.current.position.copy(e.pointOnLine ?? e.point);
                }}
                onPointerLeave={(e) => {
                  e.stopPropagation();
                  if (!hoverRef.current) return;
                  hoverRef.current.visible = false;
                }}
              />
              <Orbit2
                visible={false}
                linewidth={0.06}
                curve={ISSCurvePast}
                onPointerMove={(e) => {
                  e.stopPropagation();
                  if (!hoverRef.current) return;

                  hoverRef.current.visible = true;
                  hoverRef.current.position.copy(e.pointOnLine ?? e.point);
                }}
                onPointerLeave={(e) => {
                  e.stopPropagation();
                  if (!hoverRef.current) return;
                  hoverRef.current.visible = false;
                }}
              />
              <mesh ref={hoverRef}>
                <sphereGeometry args={[0.5, 10, 10]} />
                <meshBasicMaterial color={0xff0000} />
              </mesh>
              <mesh position={[0, 0, 0]}>
                <sphereGeometry args={[0.1, 10, 10]} />
                <meshBasicMaterial color={0x00ff00} />
              </mesh>
              <Helpers />
              {/* <Suspense fallback={null}>
              <EffectComposer>
                <Bloom mipmapBlur />
              </EffectComposer>
            </Suspense> */}
            </DynamicCanvas>
          )}
          {/* add a slider */}
          <div
            style={{
              // display: 'none',
              position: 'absolute',
              bottom: 0,
              left: 0,
              width: '50%',
            }}
          >
            <input
              type='range'
              min='0'
              max='86400'
              defaultValue='0'
              value={timeDelta}
              onChange={(e) => {
                setTimeDelta(parseInt(e.target.value));
              }}
              id='myRange'
              style={{ width: '100%' }}
            ></input>
          </div>
          <Overlay timer={timer.current} />
          <Timekeeper
            deltaMs={10}
            set={(t) => {
              timer.current = t;
              // forceUpdate();
            }}
          />
        </Provider>
      </StrictMode>
    </div>
  );
}

function checkVisibility(map: boolean[][], long: number, lat: number) {
  // if (!map) return false;
  let x = Math.min(
    Math.round(((long + 180) / 360) * map[0].length),
    map[0].length - 1,
  );
  let y = Math.min(Math.round(((lat + 90) / 180) * map.length), map.length - 1);
  y = map.length - y - 1;
  return map[y][x];
}

function Dots({
  rows = 180,
  dotDensity = 6,
  map,
  temp = new THREE.Object3D(),
}: {
  rows: number;
  dotDensity: number;
  map: boolean[][];
  temp?: THREE.Object3D;
}) {
  const instancedMeshRef = useRef();

  const DEG2RAD = Math.PI / 180;

  let n = 0;

  for (let lat = -90; lat <= 90; lat += 180 / rows) {
    const radius = Math.cos(Math.abs(lat) * DEG2RAD) * EARTH_MEAN_RADIUS;
    const circumference = radius * Math.PI * 2;
    const dotsForLat = circumference * dotDensity;
    for (let x = 0; x < dotsForLat; x++) {
      n++;
    }
  }

  useEffect(() => {
    let i = 0;
    for (let lat = -90; lat <= 90; lat += 180 / rows) {
      const radius = Math.cos(Math.abs(lat) * DEG2RAD) * EARTH_MEAN_RADIUS;
      const circumference = radius * Math.PI * 2;
      const dotsForLat = circumference * dotDensity;
      for (let x = 0; x < dotsForLat; x++) {
        const long = -180 + (x * 360) / dotsForLat;
        if (!checkVisibility(map, long, lat)) continue;
        let cartesianCoords = new THREE.Vector3();
        cartesianCoords.setFromSphericalCoords(
          EARTH_MEAN_RADIUS,
          (90 - lat) * DEG2RAD,
          (180 + long) * DEG2RAD - Math.PI / 2,
        );
        temp.position.set(
          cartesianCoords.x,
          cartesianCoords.y,
          cartesianCoords.z,
        );
        temp.lookAt(0, 0, 0);
        temp.updateMatrix();
        instancedMeshRef.current.setMatrixAt(i, temp.matrix);
        i++;
      }
    }
    instancedMeshRef.current.instanceMatrix.needsUpdate = true;
  }, []);

  return (
    <instancedMesh ref={instancedMeshRef} args={[null, null, n]}>
      <circleGeometry args={[0.03]} />
      <meshPhysicalMaterial
        color={0xffffff}
        side={THREE.BackSide}
        opacity={0.5}
        emissive={0xffffff}
        emissiveIntensity={1}
      />
    </instancedMesh>
  );
}
